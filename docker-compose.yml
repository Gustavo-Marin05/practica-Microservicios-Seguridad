version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - users
      - events
      - purchases
      - notifications
    networks:
      - app_network

  db-users:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: usersdb
    volumes:
      - pgdata-users:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d usersdb"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - app_network

  users:
    build:
      context: ./UsersServiceFull/UsersService
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DB_HOST=db-users
      - DB_PORT=5432
    depends_on:
      db-users:
        condition: service_healthy
    networks:
      - app_network

  db-events:
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: events_db
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-prootpass"]
      interval: 5s
      timeout: 5s
      retries: 20
    networks:
      - app_network

  events:
    build:
      context: ./eventosService
      dockerfile: Dockerfile
    restart: always
    depends_on:
      db-events:
        condition: service_healthy
    environment:
      - DATABASE_URL=mysql://root:rootpass@db-events:3306/events_db
      - JWT_SECRET=eyJzZWNyZXRrZXkiOiJTdXBlclNlY3JldDEyMyEhQCMiLCJhbGciOiJIUzI1NiJ9
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRES_IN=3600
      - PORT=3000
    networks:
      - app_network

  db-purchases:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: purchasesdb
    volumes:
      - pgdata-purchases:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d purchasesdb"]
      interval: 5s
      timeout: 5s
      retries: 10      
    networks:
      - app_network

  purchases:
    build:
      context: ./purchases-service
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://myuser:mypassword@db-purchases:5432/purchasesdb
      - EVENTS_SERVICE_URL=http://events:3000
      - USERS_SERVICE_URL=http://users:80
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_EXCHANGE=payments
      - RABBITMQ_ROUTING_KEY=payment.confirmed
      - JWT_SECRET=eyJzZWNyZXRrZXkiOiJTdXBlclNlY3JldDEyMyEhQCMiLCJhbGciOiJIUzI1NiJ9
      - JWT_ALGORITHM=HS256
    ports:
      - "5000:5000" # Updated to match app.py
    depends_on:
      db-purchases:
        condition: service_healthy
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - app_network

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app_network

  notifications:
    build:
      context: ./servicio-notificaciones
      dockerfile: Dockerfile
    env_file: ./servicio-notificaciones/.env
    depends_on:
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_started
    ports:
      - "3002:3002" # Optional, for direct access if needed
    restart: unless-stopped
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  pgdata-users:
  pgdata-purchases:
  mysql_data: